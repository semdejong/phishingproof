// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                   String    @id @default(cuid())
  firstname            String?
  lastname             String?
  email                String?   @unique
  password             String?
  emailVerified        DateTime?
  role                 String?   @default("user")
  APIKey               String?   @unique
  image                String?
  verification_token   String?   @map(name: "verification_token") @db.Text
  reset_password_token String?   @default("") @map(name: "reset_password_token") @db.Text
  socketId             String?   @map(name: "socket_id")
  createdAt            DateTime  @default(now()) @map(name: "created_at")
  updatedAt            DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Post     Post[]

  stripeCustomerId       String?        @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?        @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?        @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?      @map(name: "stripe_current_period_end")
  QuizInstance           QuizInstance[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id         String   @id @default(cuid())
  title      String
  content    Json?
  published  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")
  authorId   String
  categoryId String?

  Category Categories? @relation(fields: [categoryId], references: [id])

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Categories {
  id        String      @id @default(cuid())
  name      String      @unique
  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @default(now()) @map(name: "updated_at")
  Questions Questions[]
  Post      Post[]
  Quizzes   Quizzes[]

  @@map(name: "categories")
}

model Questions {
  id         String @id @default(cuid())
  question   String
  categoryId String

  Category Categories @relation(fields: [categoryId], references: [id])

  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @default(now()) @map(name: "updated_at")
  Answers          Answers[]
  QuestionInstance QuestionInstance[]

  @@map(name: "questions")
}

model Answers {
  id         String  @id @default(cuid())
  answer     String
  questionId String
  isCorrect  Boolean

  Question Questions @relation(fields: [questionId], references: [id])

  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @default(now()) @map(name: "updated_at")
  QuestionInstance QuestionInstance[]

  @@map(name: "answers")
}

model Quizzes {
  id           String         @id @default(cuid())
  title        String
  categories   Categories[]
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  updatedAt    DateTime       @default(now()) @map(name: "updated_at")
  QuizInstance QuizInstance[]

  @@map(name: "quizzes")
}

model QuizInstance {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  score     Int      @default(-1)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  Quiz             Quizzes            @relation(fields: [quizId], references: [id])
  User             User               @relation(fields: [userId], references: [id])
  QuestionInstance QuestionInstance[]

  @@map(name: "quiz_instances")
}

model QuestionInstance {
  id             String   @id @default(cuid())
  questionId     String
  quizInstanceId String
  answerId       String?  @default("")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")

  Question     Questions    @relation(fields: [questionId], references: [id])
  Answer       Answers?     @relation(fields: [answerId], references: [id])
  QuizInstance QuizInstance @relation(fields: [quizInstanceId], references: [id])

  @@map(name: "question_instances")
}
